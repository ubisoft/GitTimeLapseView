@namespace GitTimelapseView
@using AntDesign.TableModels
@using static GitTimelapseView.RazorApp

<Card Size="CardSize.Small">
	<TitleTemplate>
		<div class="card-title" style="font-weight: bolder;">
			Git Revision List
		</div>
	</TitleTemplate>
	<Body >
		<Table
            DataSource="@Revisions"
            TItem="FileRevisionTableRow"
            Size=@TableSize.Small
            ScrollY="250px"
            HidePagination=true
            PageSize=10000
            Style="margin-bottom: 10px;"
            RowClassName="@(x => x.Data.RowClass)"
            OnRow=@OnRow>
            <PropertyColumn Title="Rev" Property="c => c.Index" Sortable Width="55" Align="ColumnAlign.Center">
                <RevisionTooltip Revision=@context.Revision Placement="@Placement.Right">
                    <b>@context.Revision.Label</b>
                </RevisionTooltip>
            </PropertyColumn>
            <PropertyColumn Title="Author" Property="c => c.AuthorEmail" Sortable Width="75" Align="ColumnAlign.Center">
                 <AvatarExt Email=@context.AuthorEmail PopupPlacement="@Placement.Right"></AvatarExt>
            </PropertyColumn>
            <PropertyColumn Title="Message" Property="c => c.Message" Ellipsis Filterable></PropertyColumn>
            <PropertyColumn Title="Date"  Property="c => c.AuthorDate" Filterable Width="130"></PropertyColumn>
            <PropertyColumn Title="Sha1"  Property="c => c.ShortId" Filterable Width="60" Align="ColumnAlign.Center"></PropertyColumn>
            <ActionColumn Width="90">
                <div class="actions">
                    <Tooltip Title="@RevisionTooltip">
                        <Button Type="@ButtonType.Link" OnClick="()=>OnNavigate(context)" Size="@ButtonSize.Small">Navigate</Button>
                    </Tooltip>
                </div>
            </ActionColumn>
		</Table>
	</Body>
</Card>

<style>
    .revision {
        font-size: 12px;
        cursor: pointer;
    }

    .past-revision {

    }

    .current-revision {
        background-color: var(--gtlv-editor-highlight);
    }

    .future-revision {
        opacity: 0.3;
    }

</style>

@code {
    private const string RevisionTooltip = "Click to change current revision";
    private FileRevisionTableRow[] Revisions => TimelapseService.FileHistory != null ? TimelapseService.FileHistory.Revisions.Reverse().Select(x => new FileRevisionTableRow(x, TimelapseService)).ToArray() : Array.Empty<FileRevisionTableRow>();

    [Inject]
    TimelapseService TimelapseService { get; set; } = default!;

    protected override Task OnInitializedAsync()
    {
        TimelapseService.FileLoaded += async (e, args) => await RefreshAsync();
        TimelapseService.CurrentFileRevisionIndexChanging += async (e, args) => await RefreshAsync();
        return base.OnInitializedAsync();
    }

    Dictionary<string, object> OnRow(RowData<FileRevisionTableRow> row)
    {
        Action<MouseEventArgs> OnClick = async args => await new SelectCommitAction(row.Data.Revision.Commit).ExecuteAsync();
        Action<MouseEventArgs> OnDoubleClick = async args => await new ChangeCurrentRevisionAction(row.Data.Index).ExecuteAsync();

        return new Dictionary<string, object>
        {
            { "ondoubleclick", OnDoubleClick },
            { "onclick", OnClick },
        };
    }

    public Task RefreshAsync()
    {
        return InvokeAsync(StateHasChanged);
    }

    public void OnNavigate(FileRevisionTableRow fileChangeRow)
    {
        new ChangeCurrentRevisionAction(fileChangeRow.Index).ExecuteAsync().ConfigureAwait(false);
    }

    public class FileRevisionTableRow
    {
        private readonly TimelapseService _timelapseService;

        public FileRevisionTableRow(FileRevision revision, TimelapseService timelapseService)
        {
            Index = revision.Index;
            Id = revision.Commit.Id;
            ShortId = revision.Commit.ShortId;
            Message = revision.Commit.Message;
            AuthorDate = revision.Commit.Committer.When.LocalDateTime;
            AuthorEmail = revision.Commit.Author.Email;
            Revision = revision;
            _timelapseService = timelapseService;
        }

        public int Index { get;  set; }

        public string Id { get;  set; }

        public string ShortId { get;  set; }

        public string Message { get;  set; }

        public DateTime AuthorDate { get;  set; }

        public string AuthorEmail { get;  set; }

        public string RowClass => _timelapseService.CurrentFileRevisionIndex == Index ? "current-revision revision" :
                                  _timelapseService.CurrentFileRevisionIndex < Index ? "future-revision revision" : "past-revision revision";

        public FileRevision Revision { get; }
    }
}
