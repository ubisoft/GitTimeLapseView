@namespace GitTimelapseView

<div class="text-editor-grid">
    <div class="margin-box">
        <TextEditorMargin CssClass="editor-custommargin"></TextEditorMargin>
    </div>
    <div class="editor-box">
        <MonacoEditor @ref="_editor" CssClass="editor" Id="MonacoEditor" ConstructionOptions="EditorConstructionOptions"
			OnDidInit="EditorOnDidInit"
			OnMouseDown="EditorOnMouseDown"
			OnDidScrollChange="EditorOnDidScroll"  />
    </div>
</div>

<style>
    .editor {
        width: 100%;
        height: 100%;
        max-height: 100% !important;
        margin: 0;
        padding: 0;
        overflow: hidden;
    }

    .editorHighlighted {
        background: var(--gtlv-editor-highlight);
    }

    .editorBlockMargin {
        background: var(--gtlv-editor-margin);
        max-width: 8px;
        margin-left: 4px;
    }

    .editorBlockMarginAlternate {
        background: var(--gtlv-editor-margin-alt);
        max-width: 8px;
        margin-left: 4px;
    }

</style>

@code {
    private MonacoEditor? _editor;
    private TextModel? _model;
    private string _previousValue = string.Empty;
    private List<string> _currentDecorations = new List<string>();
    private bool _didInit;

    [Inject]
    TimelapseService TimelapseService { get; set; } = default!;

    [Inject]
    IJSRuntime JSRuntime { get; set; } = default!;

    [Inject]
    ThemingService ThemingService { get; set; } = default!;

    protected override Task OnInitializedAsync()
    {
        TimelapseService.CurrentFileRevisionIndexChanged += async (e, args) => 
        {
            if (args.Reason == FileRevisionIndexChangeReason.Explicit)
            {
                await UpdateModelAsync();
            }
        };
        TimelapseService.CurrentCommitChanged += async (e, args) => 
        {
            if (args.Reason == CommitChangeReason.Explicit)
            {
                await UpdateDecorationsAsync();
            }
        };
        return base.OnInitializedAsync();
    }


    private async Task UpdateModelAsync()
    {
        if (_editor == null || !_didInit || TimelapseService.CurrentFileRevision == null)
            return;

        var newValue = string.Join("\n", TimelapseService.CurrentFileRevision.Blocks.Select(x => x.Text));
        if (newValue == _previousValue)
            return;

        if (_model == null)
        {
            try
            {
                _model = await MonacoEditor.CreateModel(newValue, null, null);
                await _editor.SetModel(_model);
                if (TimelapseService.InitialLineNumber != null)
                {
                    await _editor.RevealLineInCenter(TimelapseService.InitialLineNumber.Value, ScrollType.Smooth).ConfigureAwait(false);
                    await SelectLineNumberAsync(TimelapseService.InitialLineNumber.Value).ConfigureAwait(false);
                }
            }
            catch(Exception)
            {
                _model = await _editor.GetModel().ConfigureAwait(false);
            }
        }

        await _model.SetValue(newValue).ConfigureAwait(false);
        _previousValue = newValue;

        await UpdateDecorationsAsync(_model).ConfigureAwait(false);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
	    {	
		    AutomaticLayout = true,
            GlyphMargin = true,
			ReadOnly = true,
			ScrollBeyondLastLine = false,
			Theme = ThemingService.Theme.MonacoTheme
	    };
    }

    private async Task EditorOnDidInit(MonacoEditorBase editor)
    {
        _didInit = true;
        await UpdateModelAsync();
    }

    private async Task EditorOnDidScroll(ScrollEvent scrollEvent)
    {
        await JSRuntime.InvokeVoidAsync($"setScroll", ".editor-custommargin", scrollEvent.ScrollTop, scrollEvent.ScrollHeight);
    }

    private Task EditorOnMouseDown(EditorMouseEvent mouseEvent)
    {
        if (mouseEvent.Target.Type == MouseTargetType.SCROLLBAR || mouseEvent.Target?.Position == null)
            return Task.CompletedTask;

        return SelectLineNumberAsync(mouseEvent.Target.Position.LineNumber);
    }

    private async Task SelectLineNumberAsync(int lineNumber)
    {
        var block = TimelapseService.CurrentFileRevision?.Blocks.FirstOrDefault(x => lineNumber >= x.StartLine && lineNumber < x.StartLine + x.LineCount);
        if (block != null)
        {
            await new SelectCommitAction(block.InitialCommit).ExecuteAsync();
        }	
    }

    private async Task UpdateDecorationsAsync(TextModel? model = null)
    {
        if (_editor == null || !_didInit || TimelapseService.CurrentFileRevision == null)
            return;

        model ??= await _editor.GetModel().ConfigureAwait(false);

        var index = 0;
        var newDecorations = new List<ModelDeltaDecoration>();
        foreach(var block in TimelapseService.CurrentFileRevision.Blocks)
        {
            var isPair = index % 2 == 0;
            var isCommitSelected = block.InitialCommit.Id == TimelapseService.CurrentCommit?.Id || block.FinalCommit.Id == TimelapseService.CurrentCommit?.Id;
            newDecorations.Add(new ModelDeltaDecoration
            {
                Range = new BlazorMonaco.Range(block.StartLine, 0, block.StartLine + block.LineCount - 1, 1),
                Options = new ModelDecorationOptions
                {
                    IsWholeLine = true,
                    ClassName = isCommitSelected ? "editorHighlighted" : null,
					GlyphMarginClassName = isPair ? "editorBlockMargin" : "editorBlockMarginAlternate"
                },
            });
            index++;
        }
		_currentDecorations = await model.DeltaDecorations(_currentDecorations, newDecorations, null);
	}
}
